/**
 * @license
 * Copyright 2019 Ludan Stoeckl√©
 * SPDX-License-Identifier: Apache-2.0
 */
import { DetParams, DetTypes, LanguageImpl, AgreeAdjParams, GrammarParsed } from './LanguageImpl';
import { GenderNumberManager } from './GenderNumberManager';
import { RefsManager } from './RefsManager';
import { Helper } from './Helper';
import { VerbsData } from 'rosaenlg-pug-code-gen';
import { Genders, Numbers, GendersMF } from './NlgLib';
import 'numeral/locales/fr';
import { FrenchAux } from 'french-verbs';
import { ConjParams } from './VerbsManager';
import { LanguageCommon } from 'rosaenlg-commons';
interface ConjParamsFr extends ConjParams {
    tense: string;
    agree: any;
    aux: FrenchAux;
}
export declare class LanguageFrench extends LanguageImpl {
    iso2: string;
    langForNumeral: string;
    langForDateFns: Locale;
    n2wordsLang: string;
    n2wordsLib: any;
    floatingPointWord: string;
    table0to9: string[];
    hasGender: boolean;
    hasNeutral: boolean;
    defaultAdjPos: string;
    defaultTense: string;
    defaultLastSeparatorForAdjectives: string;
    constructor(languageCommon: LanguageCommon);
    getDet(det: DetTypes, params: DetParams): string;
    getAgreeAdj(adjective: string, gender: Genders, number: Numbers, subject: any, params: AgreeAdjParams): string;
    getWordGender(word: string): GendersMF;
    getOrdinal(val: number): string;
    getSubstantive(subst: string, number: Numbers): string;
    parseSimplifiedString(val: string): GrammarParsed;
    thirdPossessionTriggerRef(owner: any, owned: any, params: any, spy: Spy): void;
    thirdPossessionRefTriggered(owner: any, owned: any, params: any, spy: Spy, genderNumberManager: GenderNumberManager): void;
    recipientPossession(owned: any, spy: Spy, refsManager: RefsManager, helper: Helper): void;
    getConjugation(subject: any, verb: string, tense: string, number: Numbers, conjParams: ConjParamsFr, genderNumberManager: GenderNumberManager, embeddedVerbs: VerbsData): string;
    isPlural(val: number): boolean;
}
export {};
