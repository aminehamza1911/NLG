"use strict";
/**
 * @license
 * Copyright 2019 Ludan Stoecklé
 * SPDX-License-Identifier: Apache-2.0
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageGerman = void 0;
const LanguageImpl_1 = require("./LanguageImpl");
const german_determiners_1 = require("german-determiners");
const german_adjectives_1 = require("german-adjectives");
const german_adjectives_dict_1 = __importDefault(require("german-adjectives-dict"));
const german_words_1 = require("german-words");
const german_words_dict_1 = __importDefault(require("german-words-dict"));
const german_ordinals_1 = require("german-ordinals");
require("numeral/locales/de");
const locale_1 = require("date-fns/locale");
const german_grammar_js_1 = require("../dist/german-grammar.js");
const german_dict_helper_1 = require("german-dict-helper");
const german_verbs_1 = require("german-verbs");
const german_verbs_dict_1 = __importDefault(require("german-verbs-dict"));
const n2words_DE_js_1 = __importDefault(require("../../rosaenlg-n2words/dist/n2words_DE.js"));
class LanguageGerman extends LanguageImpl_1.LanguageImpl {
    constructor(languageCommon) {
        super(languageCommon);
        this.iso2 = 'de';
        this.langForNumeral = 'de';
        this.langForDateFns = locale_1.de;
        this.n2wordsLang = 'de';
        this.n2wordsLib = n2words_DE_js_1.default;
        this.floatingPointWord = 'Komma';
        this.table0to9 = ['null', 'eins', 'zwei', 'drei', 'vier', 'fünf', 'sechs', 'sieben', 'acht', 'neun'];
        this.hasGender = true;
        this.hasNeutral = true;
        this.defaultAdjPos = 'BEFORE';
        this.hasCase = true;
        this.defaultCase = 'NOMINATIVE';
        this.userGenderOwnedForGender = true;
        this.supportsInvertSubjectVerb = true;
        this.defaultTense = 'PRASENS';
        this.canPopVerbPart = true;
        this.defaultLastSeparatorForAdjectives = 'und';
        try {
            this.dictHelper = new german_dict_helper_1.GermanDictHelper();
        }
        catch (err) {
            // console.log('well, we are in browser');
        }
    }
    getDet(det, params) {
        return german_determiners_1.getDet(det, params.case, params.genderOwner, params.numberOwner || 'S', params.genderOwned, params.numberOwned || 'S');
    }
    getAgreeAdj(adjective, gender, number, _subject, params) {
        return german_adjectives_1.agreeGermanAdjective(this.getDictManager().getAdjsData(), german_adjectives_dict_1.default, //NOSONAR
        adjective, params.case, gender, number, params.det);
    }
    getWordGender(word) {
        return german_words_1.getGenderGermanWord(this.getDictManager().getWordData(), german_words_dict_1.default, word); //NOSONAR
    }
    getOrdinal(val, _gender) {
        return german_ordinals_1.getOrdinal(val);
    }
    getSubstantive(subst, number, theCase) {
        if (number === 'S' && theCase === 'NOMINATIVE') {
            return subst;
        }
        else {
            return german_words_1.getCaseGermanWord(this.getDictManager().getWordData(), german_words_dict_1.default, subst, theCase, number); //NOSONAR
        }
    }
    parseSimplifiedString(val) {
        return german_grammar_js_1.parse(val, { dictHelper: this.dictHelper });
    }
    thirdPossessionTriggerRef(owner, owned, params, spy) {
        spy.getPugMixins().value(owned, Object.assign({}, params, { det: 'DEFINITE' }));
        spy.appendDoubleSpace();
        spy.getPugMixins().value(owner, Object.assign({}, params, { case: 'GENITIVE' }));
    }
    thirdPossessionRefTriggered(owner, owned, params, spy, genderNumberManager) {
        const germanCase = params && params.case ? params.case : 'NOMINATIVE';
        // console.log(`${owner} ${owned}`);
        //console.log(`thirdPossessionRefTriggeredDe ${JSON.stringify(owner)}`);
        //console.log(`thirdPossessionRefTriggeredDe ${number}`);
        const det = this.getDet('POSSESSIVE', {
            genderOwner: genderNumberManager.getRefGender(owner, params),
            numberOwner: genderNumberManager.getRefNumber(owner, params),
            genderOwned: genderNumberManager.getRefGender(owned, params),
            numberOwned: genderNumberManager.getRefNumber(owned, params),
            case: germanCase,
            dist: null,
            after: null,
        });
        /*
          3. décliner le mot
          getCaseGermanWord always returns something (not null)
          UNSURE ABOUT numberOwned / owner?
        */
        const declinedWord = german_words_1.getCaseGermanWord(this.getDictManager().getWordData(), german_words_dict_1.default, //NOSONAR
        owned, germanCase, genderNumberManager.getRefNumber(owner, params) || 'S');
        spy.appendPugHtml(` ${det} ${declinedWord} `);
    }
    getConjugation(_subject, verb, tense, number, conjParams, _genderNumberManager, embeddedVerbs, verbParts) {
        const tensesWithParts = [
            'FUTUR1',
            'FUTUR2',
            'PERFEKT',
            'PLUSQUAMPERFEKT',
            'KONJUNKTIV1_FUTUR1',
            'KONJUNKTIV1_PERFEKT',
            'KONJUNKTIV2_FUTUR1',
            'KONJUNKTIV2_FUTUR2',
        ];
        let pronominal = false;
        let pronominalCase;
        if (conjParams && conjParams.pronominal) {
            pronominal = true;
            pronominalCase = conjParams.pronominalCase;
        }
        //console.log('before calling libGetConjugationDe: ' + number);
        if (tensesWithParts.indexOf(tense) > -1) {
            // 'wird sein'
            // istanbul ignore next
            const aux = conjParams ? conjParams.aux : null;
            const conjElts = german_verbs_1.getConjugation(embeddedVerbs || german_verbs_dict_1.default, verb, tense, 3, number, aux, pronominal, pronominalCase);
            verbParts.push(conjElts.slice(1).join('¤')); // FUTUR2: 'wird gedacht haben'
            return conjElts[0];
        }
        else {
            return german_verbs_1.getConjugation(embeddedVerbs || german_verbs_dict_1.default, verb, tense, 3, number, null, pronominal, pronominalCase).join('¤');
        }
    }
    isPlural(val) {
        // https://german.stackexchange.com/questions/26806/numerus-beim-zahlenwort-null
        // looks the same as in English
        if (val === 1 || val === -1) {
            return false;
        }
        else {
            return true;
        }
    }
}
exports.LanguageGerman = LanguageGerman;
//# sourceMappingURL=LanguageGerman.js.map