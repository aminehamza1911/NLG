"use strict";
/**
 * @license
 * Copyright 2019 Ludan Stoecklé
 * SPDX-License-Identifier: Apache-2.0
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageItalian = void 0;
const LanguageImpl_1 = require("./LanguageImpl");
const italian_determiners_1 = require("italian-determiners");
const italian_adjectives_1 = require("italian-adjectives");
const italian_adjectives_dict_1 = __importDefault(require("italian-adjectives-dict"));
const italian_words_1 = require("italian-words");
const italian_words_dict_1 = __importDefault(require("italian-words-dict"));
const italian_ordinals_cardinals_1 = require("italian-ordinals-cardinals");
require("numeral/locales/it");
const locale_1 = require("date-fns/locale");
const italian_grammar_js_1 = require("../dist/italian-grammar.js");
const morph_it_helper_1 = require("morph-it-helper");
const italian_verbs_1 = require("italian-verbs");
const italian_verbs_dict_1 = __importDefault(require("italian-verbs-dict"));
const n2words_IT_js_1 = __importDefault(require("../../rosaenlg-n2words/dist/n2words_IT.js"));
class LanguageItalian extends LanguageImpl_1.LanguageImpl {
    constructor(languageCommon) {
        super(languageCommon);
        this.iso2 = 'it';
        this.langForNumeral = 'it';
        this.langForDateFns = locale_1.it;
        this.n2wordsLang = 'it';
        this.n2wordsLib = n2words_IT_js_1.default;
        this.floatingPointWord = 'punto';
        this.table0to9 = ['zero', 'uno', 'due', 'tre', 'quattro', 'cinque', 'sei', 'sette', 'otto', 'nove'];
        this.hasGender = true;
        this.hasNeutral = false;
        this.defaultAdjPos = 'AFTER'; // l'adjectif qualificatif se place généralement après le nom mais peut également le précéder
        this.eatSpaceWhenAdjEndsWithApostrophe = true;
        this.defaultTense = 'PRESENTE';
        this.defaultLastSeparatorForAdjectives = 'e';
        try {
            this.dictHelper = new morph_it_helper_1.MorphItHelper();
        }
        catch (err) {
            // console.log('well, we are in browser');
        }
    }
    getDet(det, params) {
        // istanbul ignore next
        return italian_determiners_1.getDet(det, params.genderOwned, params.numberOwned || 'S', params.dist); // || S will be tested when possessives added
    }
    getAgreeAdj(adjective, gender, number, subject, params) {
        return italian_adjectives_1.agreeItalianAdjective(this.getDictManager().getAdjsData(), italian_adjectives_dict_1.default, adjective, gender, number, subject, params && params.adjPos === 'BEFORE');
    }
    getWordGender(word) {
        return italian_words_1.getGenderItalianWord(this.getDictManager().getWordData(), italian_words_dict_1.default, word); //NOSONAR
    }
    getOrdinal(val, gender) {
        return italian_ordinals_cardinals_1.getOrdinal(val, gender);
    }
    getFormattedNominalGroup(possessiveAdj, adjBefore, substantive, adjAfter) {
        if (adjBefore.endsWith("'")) {
            // bell'uomo
            return `${possessiveAdj} ${adjBefore}${substantive} ${adjAfter}`;
        }
        else {
            return `${possessiveAdj} ${adjBefore} ${substantive} ${adjAfter}`;
        }
    }
    getSubstantive(subst, number) {
        if (number === 'S') {
            return subst;
        }
        else {
            return italian_words_1.getNumberItalianWord(this.getDictManager().getWordData(), italian_words_dict_1.default, subst, number); //NOSONAR
        }
    }
    parseSimplifiedString(val) {
        return italian_grammar_js_1.parse(val, { dictHelper: this.dictHelper });
    }
    getConjugation(_subject, verb, tense, number, conjParams, genderNumberManager, embeddedVerbs) {
        let aux;
        if (conjParams && conjParams.aux) {
            aux = conjParams.aux;
        }
        let agreeGender;
        let agreeNumber;
        if (conjParams && conjParams.agree) {
            agreeGender = genderNumberManager.getRefGender(conjParams.agree, null);
            agreeNumber = genderNumberManager.getRefNumber(conjParams.agree, null);
        }
        //console.log(`verbsSpecificList: ${JSON.stringify(params.verbsSpecificList)}`);
        return italian_verbs_1.getConjugation(embeddedVerbs || italian_verbs_dict_1.default, // give the verbs that we embedded in the compiled template, if there are some
        verb, tense, 3, number, aux, agreeGender, agreeNumber);
    }
    isPlural(val) {
        // https://groups.google.com/g/it.scienza.matematica/c/UogaRZ4tSb8
        if (val === 1 || val === -1) {
            return false;
        }
        else {
            return true;
        }
    }
}
exports.LanguageItalian = LanguageItalian;
//# sourceMappingURL=LanguageItalian.js.map