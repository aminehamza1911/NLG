"use strict";
/**
 * @license
 * Copyright 2019 Ludan Stoecklé
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValueManager = void 0;
class ValueManager {
    constructor(languageImpl, refsManager, genderNumberManager, randomManager, adjectiveManager, helper, possessiveManager, asmManager, synManager, constants) {
        this.languageImpl = languageImpl;
        this.refsManager = refsManager;
        this.genderNumberManager = genderNumberManager;
        this.randomManager = randomManager;
        this.adjectiveManager = adjectiveManager;
        this.helper = helper;
        this.possessiveManager = possessiveManager;
        this.asmManager = asmManager;
        this.synManager = synManager;
        this.simplifiedStringsCache = new Map();
        this.constants = constants;
    }
    setSpy(spy) {
        this.spy = spy;
    }
    value(obj, params) {
        if (typeof obj === 'undefined' || obj === null) {
            // PS: value of empty string is OK
            const err = new Error();
            err.name = 'InvalidArgumentError';
            err.message = `first parameter of value is null or undefined`;
            throw err;
        }
        // params is string when date
        if (typeof obj === 'string' && obj.charAt(0) === '<' && obj.charAt(obj.length - 1) === '>') {
            this.valueSimplifiedString(obj.substring(1, obj.length - 1), params);
            return; // don't do the rest, as it will call value again indirectly
        }
        if (params && params.owner) {
            const newParams = Object.assign({}, params);
            newParams.owner = null; // to avoid looping: we already take into account that param
            this.possessiveManager.thirdPossession(params.owner, obj, newParams);
            return;
        }
        // if first param is an array: we choose one
        const firstParam = this.synManager.synFctHelper(obj);
        if (typeof firstParam === 'number') {
            this.spy.appendPugHtml(this.valueNumber(firstParam, params));
        }
        else if (typeof firstParam === 'string') {
            this.spy.appendPugHtml(this.valueString(firstParam, params));
        }
        else if (firstParam instanceof Date) {
            this.spy.appendPugHtml(this.valueDate(firstParam, params ? params.dateFormat : null));
        }
        else if (firstParam.isAnonymous) {
            // do nothing
        }
        else if (typeof firstParam === 'object') {
            // it calls mixins, it already appends
            this.valueObject(firstParam, params);
        }
        else {
            const err = new Error();
            err.name = 'TypeError';
            err.message = `value not possible on: ${JSON.stringify(firstParam)}`;
            throw err;
        }
        if (params && params.represents) {
            this.genderNumberManager.setRefGender(params.represents, firstParam, params);
            // we cannot use setRefGenderNumber because sometimes obj is a word => dict lookup
            if (params.number) {
                this.genderNumberManager.setRefNumber(params.represents, params.number);
            }
        }
    }
    valueDate(val, dateFormat) {
        //console.log(`FORMAT: ${dateFormat}`);
        if (this.spy.isEvaluatingEmpty()) {
            return 'SOME_DATE';
        }
        else {
            // we can't protect all: e.g. "avril" in French must not be protected (d'avril)
            // but we can/must protect everything that has numbers, : or , in it
            const original = this.languageImpl.getFormattedDate(val, dateFormat);
            const regexDe = new RegExp(`[^${this.constants.tousCaracteresMinMajRe}].*`);
            const protectedString = original.replace(regexDe, '§$&§');
            return protectedString;
        }
    }
    valueSimplifiedString(val, params) {
        if (this.spy.isEvaluatingEmpty()) {
            this.spy.appendPugHtml('SOME_STRING');
            return;
        }
        let solved;
        solved = this.simplifiedStringsCache.get(val);
        if (!solved) {
            // console.log(`BEFORE: #${val}#`);
            try {
                solved = this.languageImpl.parseSimplifiedString(val);
                // console.log(solved);
                // manager unknown words
                if (solved.unknownNoun) {
                    if (solved.gender != 'M' && solved.gender != 'F' && solved.gender != 'N') {
                        const err = new Error();
                        err.name = 'NotFoundInDict';
                        err.message = `${solved.noun} is not in dict. Indicate a gender, M F or N!`;
                        throw err;
                    }
                    delete solved['unknownNoun'];
                }
                this.simplifiedStringsCache.set(val, solved);
            }
            catch (e) {
                const err = new Error();
                err.name = 'ParseError';
                err.message = `could not parse <${val}>: ${e.message}`;
                throw err;
            }
        }
        // we keep the params
        const newParams = Object.assign({}, solved, params);
        delete newParams['noun'];
        if (params && params.debug) {
            console.log(`DEBUG: <${val}> => ${JSON.stringify(solved)} - final: ${solved.noun} ${JSON.stringify(newParams)}`);
        }
        this.value(solved.noun, newParams);
    }
    valueString(val, params) {
        if (this.spy.isEvaluatingEmpty()) {
            return 'SOME_STRING';
        }
        // simplest case but edge case
        if (!params) {
            return val;
        }
        if (this.languageImpl.hasCase) {
            params.case = params.case || this.languageImpl.defaultCase;
        }
        // we do not always need genderOwned: only in some situations
        // typically when generating a substantive (plural), we don't need it
        // if we request it anyway, we might end up with an exception when is not in dict
        if (params.det || params.adj || params.possessiveAdj || params.represents) {
            params.genderOwned = this.genderNumberManager.getRefGender(val, params);
        }
        // get the number of the *owneD* thing, not the ownerR
        // 'number': can be null, or S P, or point to an object
        params.numberOwned = this.genderNumberManager.getRefNumber(null, params) || 'S';
        // console.log(`here for ${val} with params: ${JSON.stringify(params)}`);
        const getAdjStringFromList = (adjectives, separator, adjPos) => {
            if (!adjectives || adjectives.length === 0) {
                return '';
            }
            const agreedAdjs = [];
            for (let i = 0; i < adjectives.length; i++) {
                agreedAdjs.push(this.adjectiveManager.getAgreeAdj(adjectives[i], val, {
                    gender: params.gender,
                    genderOwned: params.genderOwned,
                    number: params.number,
                    numberOwned: params.numberOwned,
                    case: params.case,
                    det: params.det,
                    adjPos: adjPos, // we cannot use the params direct here: possible mix of before and after
                }));
            }
            const lastSep = agreedAdjs.length > 1
                ? '¤' + (separator != null ? separator : this.languageImpl.getDefaultLastSeparatorForAdjectives()) + '¤'
                : null;
            switch (agreedAdjs.length) {
                case 1:
                    return agreedAdjs[0];
                case 2:
                    return agreedAdjs.join(lastSep);
                default:
                    return agreedAdjs.slice(0, agreedAdjs.length - 1).join(', ') + lastSep + agreedAdjs[agreedAdjs.length - 1];
            }
        };
        const getAdjPos = (adjPosParams) => {
            let adjPos;
            if (adjPosParams && adjPosParams.adjPos) {
                adjPos = adjPosParams.adjPos;
                if (adjPos && adjPos != 'AFTER' && adjPos != 'BEFORE') {
                    const err = new Error();
                    err.name = 'InvalidArgumentError';
                    err.message = 'adjective position must be either AFTER or BEFORE';
                    throw err;
                }
            }
            if (!adjPos) {
                adjPos = this.languageImpl.defaultAdjPos;
            }
            return adjPos;
        };
        let adjBefore = '';
        let adjAfter = '';
        {
            if (params && params.adj) {
                if (params.adj['BEFORE'] || params.adj['AFTER']) {
                    // is an object with BEFORE and AFTER params
                    adjBefore = getAdjStringFromList(params.adj['BEFORE'], params.adj['SEP_BEFORE'], 'BEFORE');
                    adjAfter = getAdjStringFromList(params.adj['AFTER'], params.adj['SEP_AFTER'], 'AFTER');
                }
                else {
                    let adj = null; // used when not BEFORE + AFTER combined
                    const adjPos = getAdjPos(params);
                    if (typeof params.adj === 'string' || params.adj instanceof String) {
                        adj = getAdjStringFromList([params.adj], null, adjPos);
                    }
                    else if (Array.isArray(params.adj)) {
                        adj = getAdjStringFromList(params.adj, null, adjPos);
                    }
                    else {
                        const err = new Error();
                        err.name = 'InvalidArgumentError';
                        err.message = 'adj param has an invalid structure';
                        throw err;
                    }
                    switch (adjPos) {
                        case 'BEFORE': {
                            adjBefore = adj;
                            break;
                        }
                        case 'AFTER': {
                            adjAfter = adj;
                            break;
                        }
                    }
                }
            }
        }
        const valSubst = this.languageImpl.getSubstantive(val, params.numberOwned, params.case);
        let possessiveAdj = '';
        if (params.possessiveAdj) {
            possessiveAdj = this.adjectiveManager.getAgreeAdj(params.possessiveAdj, val, params);
        }
        const everythingAfterDet = this.languageImpl.getFormattedNominalGroup(possessiveAdj, adjBefore, valSubst, adjAfter);
        // we have to generate the det at the end: in Spanish we need to know what follows the det
        let det = '';
        if (params && params.det) {
            const paramsForDet = {
                genderOwned: params.genderOwned,
                numberOwned: params.numberOwned,
                genderOwner: params.genderOwner,
                numberOwner: params.numberOwner,
                case: params.case,
                dist: params.dist,
                after: everythingAfterDet.trim(),
                useTheWhenPlural: params.useTheWhenPlural,
                adjectiveAfterDet: adjBefore !== '',
                forceDes: params.FORCE_DES,
            };
            det = this.languageImpl.getDet(params.det, paramsForDet); // can return ''
            // console.log(`${JSON.stringify(paramsForDet)} => ${det}`);
        }
        return det + ' ' + everythingAfterDet;
    }
    valueObject(obj, params) {
        // console.log(obj);
        //- we already have the next one
        if (this.refsManager.getNextRef(obj)) {
            // console.log('we already have the next one');
            this.randomManager.setRndNextPos(this.refsManager.getNextRef(obj).rndNextPos);
            this.refsManager.deleteNextRef(obj);
        }
        if (params && params.REPRESENTANT === 'ref') {
            this.valueRef(obj, params);
        }
        else if (params && params.REPRESENTANT === 'refexpr') {
            this.valueRefexpr(obj, params);
        }
        else if (!this.refsManager.hasTriggeredRef(obj)) {
            this.valueRef(obj, params);
        }
        else if (obj.refexpr) {
            this.valueRefexpr(obj, params);
        }
        else {
            //- we trigger ref if obj has no refexpr
            this.valueRef(obj, params);
        }
    }
    valueRefexpr(obj, params) {
        // console.log('refexpr: ' + JSON.stringify(params));
        // is only called when obj.refexpr has a value
        this.spy.getPugMixins()[obj.refexpr](obj, params);
    }
    valueRef(obj, params) {
        //- printObj('value_ref', obj)
        if (obj.ref) {
            // console.log('value_ref_ok: ' + obj.ref);
            this.spy.getPugMixins()[obj.ref](obj, params);
        }
        else {
            const err = new Error();
            err.name = 'InvalidArgumentError';
            err.message = `${JSON.stringify(obj)} has no ref mixin`;
            throw err;
        }
        this.refsManager.setTriggeredRef(obj);
    }
    valueNumber(val, params) {
        if (this.spy.isEvaluatingEmpty()) {
            return 'SOME_NUMBER';
        }
        else {
            if (params && params.AS_IS) {
                return this.helper.protectString(val.toString());
            }
            else if (params && params.FORMAT) {
                return this.helper.protectString(this.languageImpl.getFormatNumberWithNumeral(val, params.FORMAT));
            }
            else if (params && params.TEXTUAL) {
                return this.languageImpl.getTextualNumber(val);
            }
            else if (params && params.ORDINAL_NUMBER) {
                return this.helper.protectString(this.languageImpl.getOrdinalNumber(val));
            }
            else if (params && params.ORDINAL_TEXTUAL) {
                if (val % 1 != 0) {
                    // is not int
                    const err = new Error();
                    err.name = 'InvalidArgumentError';
                    err.message = `ORDINAL_TEXTUAL must be an integer, here ${val}`;
                    throw err;
                }
                // currently used only for it_IT and es_ES
                const gender = params.agree != null ? this.genderNumberManager.getRefGender(params.agree, params) : 'M';
                return this.languageImpl.getOrdinal(val, gender);
            }
            else {
                return this.helper.protectString(this.languageImpl.getStdFormatedNumber(val));
            }
        }
    }
}
exports.ValueManager = ValueManager;
//# sourceMappingURL=ValueManager.js.map