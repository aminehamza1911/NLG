/**
 * @license
 * Copyright 2019 Ludan Stoeckl√©
 * SPDX-License-Identifier: Apache-2.0
 */
import { RefsManager, RepresentantType } from 'rosaenlg/dist/RefsManager';
import { RandomManager } from 'rosaenlg/dist/RandomManager';
import { AdjectiveManager } from 'rosaenlg/dist/AdjectiveManager';
import { SynManager } from 'rosaenlg/dist/SynManager';
import { Helper } from 'rosaenlg/dist/Helper';
import { GenderNumberManager } from 'rosaenlg/dist/GenderNumberManager';
import { LanguageImpl, DetTypes } from 'rosaenlg/dist/LanguageImpl';
import { PossessiveManager } from 'rosaenlg/dist/PossessiveManager';
import { Numbers, Genders } from 'rosaenlg/dist/NlgLib';
import { AsmManager } from 'rosaenlg/dist/AsmManager';
import { Constants } from 'rosaenlg-commons';
import { Dist } from 'english-determiners';
export declare type AdjPos = 'BEFORE' | 'AFTER';
declare type AdjStructure = string | string[];
export interface ValueParams {
    owner: any;
    represents: any;
    gender: Genders;
    number: Numbers;
    genderOwned: Genders;
    numberOwned: Numbers;
    genderOwner: Genders;
    numberOwner: Numbers;
    case?: string;
    det: DetTypes;
    adj: AdjStructure;
    adjPos: AdjPos;
    dist: Dist;
    debug: boolean;
    dateFormat: string;
    REPRESENTANT: RepresentantType;
    AS_IS: boolean;
    TEXTUAL: boolean;
    ORDINAL_NUMBER: boolean;
    ORDINAL_TEXTUAL: boolean;
    FORMAT: string;
    possessiveAdj?: string;
    agree?: any;
    useTheWhenPlural: boolean;
    FORCE_DES: boolean;
}
export declare class ValueManager {
    private languageImpl;
    private refsManager;
    private genderNumberManager;
    private randomManager;
    private adjectiveManager;
    private helper;
    private possessiveManager;
    private asmManager;
    private synManager;
    private spy;
    private simplifiedStringsCache;
    private constants;
    constructor(languageImpl: LanguageImpl, refsManager: RefsManager, genderNumberManager: GenderNumberManager, randomManager: RandomManager, adjectiveManager: AdjectiveManager, helper: Helper, possessiveManager: PossessiveManager, asmManager: AsmManager, synManager: SynManager, constants: Constants);
    setSpy(spy: Spy): void;
    value(obj: any, params: ValueParams): void;
    private valueDate;
    private valueSimplifiedString;
    private valueString;
    private valueObject;
    private valueRefexpr;
    private valueRef;
    private valueNumber;
}
export {};
