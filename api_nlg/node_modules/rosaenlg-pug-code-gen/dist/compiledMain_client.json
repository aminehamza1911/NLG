{"code":"function setRefGender(obj, gender) {\n  util.genderNumberManager.setRefGender(obj, gender, null);\n}\nfunction getRefGender(obj) {\n  return util.genderNumberManager.getRefGender(obj);\n}\nfunction setRefNumber(obj, number) {\n  util.genderNumberManager.setRefNumber(obj, number);\n}\nfunction getRefNumber(obj) {\n  return util.genderNumberManager.getRefNumber(obj);\n}\nfunction setRefGenderNumber(obj, gender, number) {\n  util.genderNumberManager.setRefGenderNumber(obj, gender, number);\n}\nfunction getAnonymous(gender, number) {\n  return util.genderNumberManager.getAnonymous(gender, number);\n}\nfunction getAnonMS() {\n  return util.genderNumberManager.getAnonMS();\n}\nfunction getAnonMP() {\n  return util.genderNumberManager.getAnonMP();\n}\nfunction getAnonFS() {\n  return util.genderNumberManager.getAnonFS();\n}\nfunction getAnonFP() {\n  return util.genderNumberManager.getAnonFP();\n}\nfunction resetRep(obj) {\n  util.refsManager.resetRep(obj);\n}\nfunction hasTriggeredRef(obj) {\n  return util.refsManager.hasTriggeredRef(obj);\n}\nfunction setTriggeredRef(obj) {\n  util.refsManager.setTriggeredRef(obj);\n}\nfunction dumpRefMap() {\n  util.refsManager.dumpRefMap();\n}\nfunction getNextRep(obj, params) {\n  return util.refsManager.getNextRep(obj, params);\n}\nfunction dumpHasSaid() {\n  util.saidManager.dumpHasSaid();\n}\nfunction getDumpHasSaid() {\n  return util.saidManager.getDumpHasSaid();\n}\nfunction getHasSaidCopy() {\n  return util.saidManager.getHasSaidCopy();\n}\nfunction recordSaid(key) {\n  util.saidManager.recordSaid(key);\n}\nfunction deleteSaid(key) {\n  util.saidManager.deleteSaid(key);\n}\nfunction hasSaid(key) {\n  return util.saidManager.hasSaid(key);\n}\nfunction recordValue(key, value) {\n  util.getSaidManager().recordValue(key, value);\n}\nfunction deleteValue(key) {\n  util.getSaidManager().deleteValue(key);\n}\nfunction getValue(key) {\n  return util.getSaidManager().getValue(key);\n}\nfunction hasFlag(params, flag) {\n  return util.helper.hasFlag(params, flag);\n}\nfunction getFlagValue(params, flag) {\n  return util.helper.getFlagValue(params, flag);\n}\nfunction protectString(string) {\n  return util.helper.protectString(string);\n}\npug_mixins[\"uppercaseWords\"] = pug_interp = function(str){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_html = pug_html + \"¤\" + (pug_escape(null == (pug_interp = util.helper.getUppercaseWords(str)) ? \"\" : pug_interp)) + \"¤\";\n};\nfunction isSentenceStart() {\n  return util.helper.isSentenceStart();\n}\nfunction getMorF(table, obj) {\n  return util.helper.getMFN(table, obj);\n}\nfunction getMFN(table, obj) {\n  return util.helper.getMFN(table, obj);\n}\nfunction getSorP(table, obj) {\n  return util.helper.getSorP(table, obj);\n}\nfunction setWordData(word, wordData) {\n  util.languageImpl.getDictManager().setWordData(word, wordData)\n}\nfunction setAdjData(word, wordData) {\n  util.languageImpl.getDictManager().setAdjData(word, wordData)\n}\nlet spy = {\n  getPugHtml: function() {\n    return pug_html;\n  },\n  getPugMixins: function() {\n    return pug_mixins;\n  },\n  setPugHtml: function(new_pug_html) {\n    pug_html = new_pug_html;\n  },\n  appendPugHtml: function(append) {\n    pug_html = pug_html + append;\n  },\n  appendDoubleSpace: function() {\n    pug_html = pug_html + \"  \";\n  },\n  getEmbeddedLinguisticResources: function() {\n    return embeddedLinguisticResources;\n  },\n  \n  // we should avoid this one as util. is already available\n  isEvaluatingEmpty: function() {\n    return util.saveRollbackManager.isEvaluatingEmpty;\n  },\n  \n  isEvaluatingChoosebest: function() {\n    return util.saveRollbackManager.isEvaluatingChoosebest;\n  }\n}\npug_mixins[\"dummy\"] = pug_interp = function(){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_mixins['dummy']();\n};\npug_mixins[\"insertVal\"] = pug_interp = function(val){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_html = pug_html + \"¤\" + (pug_escape(null == (pug_interp = val) ? \"\" : pug_interp)) + \"¤\";\n};\npug_mixins[\"insertValUnescaped\"] = pug_interp = function(val){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_html = pug_html + \"¤\" + (null == (pug_interp = val) ? \"\" : pug_interp) + \"¤\";\n};\nfunction printObj(before, obj) {\n  console.log(before + ' ' + JSON.stringify(obj).substring(0, 20) );\n}\npug_mixins[\"flushBuffer\"] = pug_interp = function(){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_html = pug_html + \"¤¤\";\n};\npug_mixins[\"eatSpace\"] = pug_interp = function(){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_html = pug_html + \"¤EATSPACE¤\";\n};\nfunction logParams(params) {\n  console.log('params: ' + JSON.stringify(params));\n}\nfunction valueToSorP(val) {\n  return util.languageImpl.isPlural(val) ? 'P' : 'S';\n}\npug_mixins[\"toHtmlList\"] = pug_interp = function(obj){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_html = pug_html + \"\\u003Cul\\u003E\";\n// iterate obj\n;(function(){\n  var $$obj = obj;\n  if ('number' == typeof $$obj.length) {\n      for (var index = 0, $$l = $$obj.length; index < $$l; index++) {\n        var val = $$obj[index];\nif (val!=null && typeof(val) == \"object\") {\npug_html = pug_html + \"\\u003Cli\\u003E\" + \"¤\" + (pug_escape(null == (pug_interp = index) ? \"\" : pug_interp)) + \"¤\" + \"¤: ¤\";\npug_mixins[\"toHtmlList\"](val);\npug_html = pug_html + \"¤¤\\u003C\\u002Fli\\u003E\";\n}\nelse {\npug_html = pug_html + \"\\u003Cli\\u003E\" + \"¤\" + (pug_escape(null == (pug_interp = index + ': ' + val) ? \"\" : pug_interp)) + \"¤\" + \"\\u003C\\u002Fli\\u003E\";\n}\n      }\n  } else {\n    var $$l = 0;\n    for (var index in $$obj) {\n      $$l++;\n      var val = $$obj[index];\nif (val!=null && typeof(val) == \"object\") {\npug_html = pug_html + \"\\u003Cli\\u003E\" + \"¤\" + (pug_escape(null == (pug_interp = index) ? \"\" : pug_interp)) + \"¤\" + \"¤: ¤\";\npug_mixins[\"toHtmlList\"](val);\npug_html = pug_html + \"¤¤\\u003C\\u002Fli\\u003E\";\n}\nelse {\npug_html = pug_html + \"\\u003Cli\\u003E\" + \"¤\" + (pug_escape(null == (pug_interp = index + ': ' + val) ? \"\" : pug_interp)) + \"¤\" + \"\\u003C\\u002Fli\\u003E\";\n}\n    }\n  }\n}).call(this);\npug_html = pug_html + \"\\u003C\\u002Ful\\u003E\";\n};\nfunction debug(filename, line) {\n  if (filename !== null) {\n    pug_debug_filename = filename;\n  }\n  pug_debug_line = line;\n  if (locals.renderDebug) { // locals is available\n    let id = line;\n    if (filename !== null) {\n      id = filename.replace(/\"/g, '') + ': ' + id;\n    }\n    pug_html = pug_html + `<span class=\"rosaenlg-debug\" id=\"${id}\"></span>`;\n  }\n}\npug_mixins[\"foreach\"] = pug_interp = function(elts, mixinFct, asm, params){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_html = pug_html + \"¤¤¤\";\nutil.asmManager.foreach(elts, mixinFct, asm, params);\npug_html = pug_html + \"¤¤¤\";\n};\npug_mixins[\"value\"] = pug_interp = function(obj, params){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_html = pug_html + \"¤¤¤\";\nutil.valueManager.value(obj, params);\npug_html = pug_html + \"¤¤¤\";\n};\npug_mixins[\"syn\"] = pug_interp = function(){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nvar items = [];\nfor (pug_interp = 0; pug_interp < arguments.length; pug_interp++) {\n  items.push(arguments[pug_interp]);\n}\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_html = pug_html + \"¤¤¤\";\nutil.synManager.simpleSyn(items);\npug_html = pug_html + \"¤¤¤\";\n};\nfunction syn_fct(items) {\n  return util.synManager.synFct(items);\n}\npug_mixins[\"agreeAdj\"] = pug_interp = function(adjective, subject, params){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_html = pug_html + \"¤¤¤\";\nutil.adjectiveManager.agreeAdj(adjective, subject, params);\npug_html = pug_html + \"¤¤¤\";\n};\npug_mixins[\"recipientPossession\"] = pug_interp = function(owned){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_html = pug_html + \"¤¤¤\";\nutil.possessiveManager.recipientPossession(owned);\npug_html = pug_html + \"¤¤¤\";\n};\npug_mixins[\"thirdPossession\"] = pug_interp = function(owner, owned, params){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_html = pug_html + \"¤¤¤\";\nutil.possessiveManager.thirdPossession(owner, owned, params);\npug_html = pug_html + \"¤¤¤\";\n};\npug_mixins[\"verb\"] = pug_interp = function(subject, verbInfo, params){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_html = pug_html + \"¤¤¤\";\nutil.sentenceManager.verb(subject, verbInfo, params);\npug_html = pug_html + \"¤¤¤\";\n};\npug_mixins[\"subjectVerb\"] = pug_interp = function(subject, verbInfo, params){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_html = pug_html + \"¤¤¤\";\nutil.sentenceManager.subjectVerb(subject, verbInfo, params);\npug_html = pug_html + \"¤¤¤\";\n};\npug_mixins[\"subjectVerbAdj\"] = pug_interp = function(subject, verbInfo, adjective, params){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_html = pug_html + \"¤¤¤\";\nutil.sentenceManager.subjectVerbAdj(subject, verbInfo, adjective, params);\npug_html = pug_html + \"¤¤¤\";\n};\npug_mixins[\"verbPart\"] = pug_interp = function(){\nvar block = (this && this.block), attributes = (this && this.attributes) || {};\nfunction addToParams(_toAdd) { return Object.assign({}, params, _toAdd); }\npug_html = pug_html + \"¤¤¤\" + \"¤\" + (pug_escape(null == (pug_interp = util.verbsManager.popVerbPart()) ? \"\" : pug_interp)) + \"¤\" + \"¤¤¤\";\n};\nutil.setSpy(spy);"}