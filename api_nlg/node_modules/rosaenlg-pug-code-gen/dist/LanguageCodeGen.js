"use strict";
/**
 * @license
 * Copyright 2018, Ludan Stoeckl√©
 * SPDX-License-Identifier: MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageCodeGen = void 0;
class LanguageCodeGen {
    constructor() {
        // do nothing
    }
    // more of a helper
    getVerbsInfo(verbs) {
        const res = {};
        for (let i = 0; i < verbs.length; i++) {
            res[verbs[i]] = this.getVerbInfo(verbs[i]);
        }
        return res;
    }
    getWordsInfo(words) {
        const res = {};
        for (let i = 0; i < words.length; i++) {
            res[words[i]] = this.getWordInfo(words[i]);
        }
        return res;
    }
    getAdjectivesInfo(adjectives) {
        const res = {};
        for (let i = 0; i < adjectives.length; i++) {
            res[adjectives[i]] = this.getAdjectiveInfo(adjectives[i]);
        }
        return res;
    }
    // istanbul ignore next
    getVerbInfo(_verb) {
        const err = new Error();
        err.name = 'InvalidArgumentException';
        err.message = `cannot getVerbInfo in ${this.iso2}`;
        throw err;
    }
    // istanbul ignore next
    getWordInfo(_word) {
        const err = new Error();
        err.name = 'InvalidArgumentException';
        err.message = `cannot getWordInfo in ${this.iso2}`;
        throw err;
    }
    // istanbul ignore next
    getAdjectiveInfo(_adjective) {
        const err = new Error();
        err.name = 'InvalidArgumentException';
        err.message = `cannot getAdjectiveInfo in ${this.iso2}`;
        throw err;
    }
}
exports.LanguageCodeGen = LanguageCodeGen;
//# sourceMappingURL=LanguageCodeGen.js.map